.plCustomize:
  script: |

    # custom env vars
    CICD_ENV_FILE_REF=.${CI_COMMIT_REF_NAME}.env
    if [ -f "$CICD_ENV_FILE_REF" ]; then
      echo 'INFO: found env file for ref $CI_COMMIT_REF_NAME'
      source $CICD_ENV_FILE_REF
    fi

    # working dir
    #FS_ROOT="./${CI_CONFIG_PATH%.gitlab-ci.yml}"
    echo "setting working dir to [$CICD_FS_ROOT]"
    if [ -n "$CICD_FS_ROOT" ]; then
      cd $CICD_FS_ROOT
    fi

.versionInfo:
  script: |
    # git info
    GIT_REV=$(echo $CI_COMMIT_SHA | cut -c1-8)
    GIT_TAG=$(git describe --tags --contains 2>/dev/null) || true
    if [ -n "$GIT_TAG" ]; then
      GIT_VERSION="$GIT_TAG"                 
    else
      GIT_VERSION="$GIT_REV"                 
    fi
    export CICD_GIT_VERSION="$GIT_VERSION"
    export CICD_GIT_DATE=$(git log -1 --format=%at)
    export CICD_GIT_AUTHOR=$(git log -1 --pretty=format:'%ae')
    echo "providing build infos ver=$CICD_GIT_VERSION, date=$CICD_GIT_DATE"

    # image tag
    if [ -n "$CICD_IMAGE_TAG" ]; then
      :
    else
      export CICD_IMAGE_TAG="$GIT_VERSION"
    fi
    echo "tagging image as [$CICD_IMAGE_TAG]"
    export CICD_IMAGE_ID=$CI_REGISTRY_IMAGE:$CICD_IMAGE_TAG

.template: &registryLoginDeclare |
  function registryLogin() {
    # local registry and repo access
    docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    export CICD_NETRC="machine gitlab.switch.ch login gitlab-ci-token password $CI_JOB_TOKEN"
    export GONOSUMDB="hslu.ch,gitlab.enterpriselab.ch,gitlab.switch.ch"  

    # custom registries
    export CICD_CUST_REG_LIST=$1
    for CICD_REG_SECRET in $CICD_CUST_REG_LIST; do
        CICD_CUST_REG_SECRET=$(vault kv get -field=data -format=json $CICD_REG_SECRET) || exit $?
        CICD_CUST_REG_URL=$(echo $CICD_CUST_REG_SECRET | jq -r '.url')
        CICD_CUST_REG_USER=$(echo $CICD_CUST_REG_SECRET | jq -r '.user')
        CICD_CUST_REG_TOKEN=$(echo $CICD_CUST_REG_SECRET | jq -r '.token')
        docker login -u $CICD_CUST_REG_USER -p $CICD_CUST_REG_TOKEN $CICD_CUST_REG_URL
        echo "logged in to custom registry [$CICD_CUST_REG_URL] from [$CICD_REG_SECRET]"
    done
  }

.registryPullLogin:
  script:
    - *registryLoginDeclare
    - CICD_VT_PULL_REGISTRIES="$CICD_VT_PULL_REGISTRIES $CICD_CUST_PULL_REGISTRIES"
    - CICD_VT_PULL_REG_FIRST=$(echo "$CICD_VT_PULL_REGISTRIES" | { read FIRST others; echo "$FIRST"; })
    - !reference [.vaultLogin, script]
    - registryLogin "$CICD_VT_PULL_REG_FIRST"

.registryPushLogin:
  script:
    - *registryLoginDeclare
    - export CICD_VT_PUSH_REGISTRIES="$CICD_VT_PUSH_REGISTRIES $CICD_CUST_PUSH_REGISTRIES"
    - !reference [.vaultLogin, script]
    - registryLogin "$CICD_VT_PUSH_REGISTRIES"

.vaultLogin:
  script: |
    : ${CICD_VT_ROLE:=$CICD_VT_DEFAULT_ROLE}
    if [ -n "${CICD_KA_GROUP}" ]; then
        CICD_VT_ROLE="${CICD_KA_VT_ROLE_BASE}.${CICD_KA_GROUP}"
        CICD_VT_HOST="${CICD_KA_VT_DIR}/${CICD_KA_GROUP}"
    fi
    echo "authenticate with vault using JWT as [$CICD_VT_ROLE]..."
    export VAULT_TOKEN="$(vault write -field=token $CICD_VT_AUTH role=$CICD_VT_ROLE jwt=$CI_JOB_JWT)"